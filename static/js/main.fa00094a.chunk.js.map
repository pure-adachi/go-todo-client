{"version":3,"sources":["logo.svg","App.tsx","requester.ts","reportWebVitals.ts","index.tsx"],"names":["App","url","initialState","loading","error","data","useReducer","state","type","Error","dispatch","useEffect","dispatchSafe","action","abortController","AbortController","a","fetch","response","ok","json","statusText","abort","useRequest","process","className","src","logo","alt","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAAe,G,MAAA,IAA0B,kC,oDCwB1BA,MAff,WACE,IAEA,ECVwB,SAAIC,GAa5B,IAAMC,EAA2B,CAC/BC,SAAS,EACTC,MAAO,KACPC,KAAM,MAkBR,EAA0BC,sBAfV,SAACC,EAAD,GAA2D,IAArCC,EAAoC,EAApCA,KAAMH,EAA8B,EAA9BA,KAAMD,EAAwB,EAAxBA,MAChD,OAAQI,GACN,IAAK,OACH,OAAO,eAAKN,GACd,IAAK,QACH,OAAO,2BAAKK,GAAZ,IAAmBJ,SAAS,IAC9B,IAAK,OACH,OAAO,2BAAKI,GAAZ,IAAmBJ,SAAS,EAAOE,SACrC,IAAK,QACH,OAAO,2BAAKE,GAAZ,IAAmBJ,SAAS,EAAOC,UACrC,QACE,MAAM,IAAIK,MAAM,0BAIwBP,GAA9C,mBAAOK,EAAP,KAAcG,EAAd,KA4BA,OA1BAC,qBAAU,WACR,IAAIC,EAAe,SAACC,GAAD,OAAiBH,EAASG,IACvCC,EAAkB,IAAIC,gBAiB5B,OAfA,sBAAC,8BAAAC,EAAA,6DACCJ,EAAa,CAAEJ,KAAM,UADtB,kBAG0BS,MAAMhB,GAHhC,YAGSiB,EAHT,QAIgBC,GAJhB,6BAKKP,EALL,SAK8CM,EAASE,OALvD,yBAKoBZ,KAAM,OAAQH,KALlC,6CAOWD,EAAQ,IAAIK,MAAJ,wBAA2BS,EAASG,aAClDT,EAAa,CAAEJ,KAAM,QAASJ,UARnC,0DAWGQ,EAAa,CAAEJ,KAAM,QAASJ,MAAK,OAXtC,yDAAD,GAeO,WACLQ,EAAe,kBAAM,MACrBE,EAAgBQ,QAChBZ,EAAS,CAAEF,KAAM,OAAQH,KAAM,KAAMD,MAAO,UAE7C,CAACH,IAEGM,EDpDmBgB,CAFjB,UAAMC,2CAAN,gBAEDrB,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAEjB,OACE,qBAAKoB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,4BAAIzB,EAAU,cAAH,OAAmBE,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAMwB,gBEJ7BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fa00094a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useRequest } from \"./requester\";\n\ninterface ResponseType {\n  message: string;\n}\n\nfunction App() {\n  const url = `${process.env.REACT_APP_SERVER_URL}/api/sample`;\n\n  const { loading, data } = useRequest<ResponseType>(url);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{loading ? \"Loading ...\" : data?.message}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useReducer } from \"react\";\n\nexport const useRequest = <T>(url: string) => {\n  interface StatusType {\n    loading: boolean;\n    data: T | null;\n    error: Error | null;\n  }\n\n  interface ActionType {\n    type: \"init\" | \"start\" | \"data\" | \"error\";\n    data: T | null;\n    error: Error | null;\n  }\n\n  const initialState: StatusType = {\n    loading: false,\n    error: null,\n    data: null,\n  };\n\n  const reducer = (state: StatusType, { type, data, error }: ActionType) => {\n    switch (type) {\n      case \"init\":\n        return { ...initialState };\n      case \"start\":\n        return { ...state, loading: true };\n      case \"data\":\n        return { ...state, loading: false, data };\n      case \"error\":\n        return { ...state, loading: false, error };\n      default:\n        throw new Error(\"no such action type\");\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    let dispatchSafe = (action: any) => dispatch(action);\n    const abortController = new AbortController();\n\n    (async () => {\n      dispatchSafe({ type: \"start\" });\n      try {\n        const response = await fetch(url);\n        if (response.ok) {\n          dispatchSafe({ type: \"data\", data: await response.json() });\n        } else {\n          const error = new Error(`Fetch failed: ${response.statusText}`);\n          dispatchSafe({ type: \"error\", error });\n        }\n      } catch (error) {\n        dispatchSafe({ type: \"error\", error });\n      }\n    })();\n\n    return () => {\n      dispatchSafe = () => null;\n      abortController.abort();\n      dispatch({ type: \"init\", data: null, error: null });\n    };\n  }, [url]);\n\n  return state;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}